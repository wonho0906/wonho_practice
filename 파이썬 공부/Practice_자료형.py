# 함수
'''입력값을 가지고 어떤 일을 수행한 후 그 결과물을 내어 놓는 것.
'''
# 함수의 구조
'''
def 함수_이름(매개변수):
    수행할_문장1
    수행할_문장2
    ...
'''
def add(x, y):
    return x + y

a = 3
b = 4
c = add(a,b)
print(c)

# 매개변수와 인수
'''
매개변수(parameter)와 인수(arguments)는 혼용해서 사용하는 용어이므로 
잘 기억해 두자. 매개변수는 함수에 입력으로 전달된 값을 받는 변수, 
인수는 함수를 호출할 때 전달하는 입력값을 의미한다.
'''

# 입력값과 리턴값에 따른 함수의 형태
'''
함수의 형태는 입력값과 리턴값의 존재 유무에 따라 4가지 유형으로 나뉜다.
'''
# 일반적인 함수
'''
입력값이 있고 리턴값이 있는 함수가 일반적인 함수이다.
def add(x, y):
    result = x + y
    return result

- 사용하는 방법
>>> a = add(3, 4)
>>> print(a)
7

이처럼 입력값과 리턴값이 있는 함수의 사용법을 정리하면 다음과 같다.
***
리턴값을_받을_변수 = 함수_이름(입력_인수1, 입력_인수2, ...)
***
'''
# 입력값이 없는 함수
'''
>>> def say(): 
...     return 'Hi' 
매개변수 부분을 나타내는 함수 이름 뒤의 괄호 안이 비어있다.

- 사용하는 방법
>>> a = say()
>>> print(a)
Hi

위 함수를 쓰기 위해서는 say()처럼 괄호 안에 아무런 값도 넣지 않아야 한다. 
이 함수는 입력값은 없지만, 리턴값으로 "Hi"라는 문자열을 리턴한다. 
즉, a = say()처럼 작성하면 a에 "Hi"라는 문자열이 대입되는 것이다.

이처럼 입력값이 없고 리턴값만 있는 함수는 다음과 같이 사용한다.
***
리턴값을_받을_변수 = 함수_이름()
***
'''

# 리턴값이 없는 함수
'''
>>> def add(a, b): 
...     print("%d, %d의 합은 %d입니다." % (a, b, a+b))

> return ... 가 없다

- 사용하는 방법
리턴값이 없는 함수는 호출해도 
리턴되는 값이 없기 때문에 다음과 같이 사용한다.

>>> add(3, 4)
3, 4의 합은 7입니다.

리턴값이 없는 함수는 다음과 같이 사용한다
***
함수_이름(입력_인수1, 입력_인수2, ...)
***

아마도 여러분은 ‘3, 4의 합은 7입니다.’라는 문장을 출력했는데 
왜 리턴값이 없다는 것인지 의아하게 생각할 수도 있다. 
이 부분을 초보자들이 혼란스러워하는데, 
print 문은 함수의 구성 요소 중 하나인 
‘수행할_문장’에 해당하는 부분일 뿐이다. 
리턴값은 당연히 없다. 리턴값은 오직 return 명령어로만 돌려받을 수 있다.

이를 확인해 보자. 리턴받을 값을 a 변수에 대입하고 a 값을 출력해 보면 
리턴값이 있는지, 없는지 알 수 있다.

>>> a = add(3, 4)
3, 4의 합은 7입니다.
>>> print(a)
None

a 값으로 None이 출력되었다. 
None이란 ‘거짓을 나타내는 자료형’이라고 언급한 적이 있다. 
add 함수처럼 리턴값이 없을 때 a = add(3, 4)처럼 쓰면 
함수 add는 리턴값으로 a 변수에 None을 리턴한다. 
None을 리턴한다는 것은 리턴값이 없다는 것이다.

'''